import numpy as np
from scipy import stats

#Europ_BS
def bs_pricing(s,k,r,T,sigma,option_type):
    d1 = (np.log(s / k) + (r + 1 / 2 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma*np.sqrt(T)
    
    if option_type == 'call':
        c = s * stats.norm.cdf(d1, 0.0, 1.0) - k * np.exp(-r * T) * stats.norm.cdf(d2, 0.0, 1.0)
        return c
    elif option_type == 'put':
        p = k * np.exp(-r * T) * stats.norm.cdf(-1 * d2) - s * stats.norm.cdf(-1 * d1)
        return p
    else:
        return None

#bisection method
def imp_vol_binary(s,k,r,T,close,option_type):
    c_est = 0
    top = 4  # highiest
    floor = 0  # lowest
    sigma = (floor + top) / 2  # initial_sigma
    while abs(close - c_est) > 1e-8:
        c_est = bs_pricing(s,k,r,T,sigma,option_type)
        # determine whether the sigmma is underestimated or overestimated and correct it.
        if close - c_est > 0:  # f(x)>0
            floor = sigma
            sigma = (sigma + top) / 2
        else:
            top = sigma
            sigma = (sigma + floor) / 2
    return sigma

def imp_vol_newton(s,k,r,T,close,option_type,sigma_est=0.5,it=50):
    if option_type == 'call':
        for i in range(it):
            call = bs_pricing(s,k,r,T,sigma_est,option_type)
            d1 = (np.log(s / k) + (r + 1 / 2 * sigma_est ** 2) * T) / (sigma_est * np.sqrt(T))
            vega = s * np.sqrt(T) * stats.norm.pdf(d1)
            sigma_est -= (call - close) /vega
        return sigma_est
    elif option_type == 'put':
        for i in range(it):
            put = bs_pricing(s,k,r,T,sigma_est,option_type)
            d1 = (np.log(s / k) + (r + 1 / 2 * sigma_est ** 2) * T) / (sigma_est * np.sqrt(T))
            vega = s * np.sqrt(T) * stats.norm.pdf(d1)
            sigma_est -= (put - close) /vega
            print(sigma_est)
        return sigma_est
    else:
        return None
        
bs_pricing(100,100,0.04,2,0.2,'call')
imp_vol_binary(100,100,0.04,2,16,'call')
imp_vol_newton(100,100,0.04,2,16,'call')
